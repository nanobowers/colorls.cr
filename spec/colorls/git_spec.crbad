require "spec"
require "../../src/colorls/git"

describe Colorls::Git do

  before_all do
    `echo` # initialize $? / $CHILD_STATUS
    ($?.success?).should be_true
  end

  # NOTE: lack of mocking in 'Spec' makes it hard to port over this feature..
  
  context "with file in repository root" do
    it "returns `M`" do
      repopath = "."
      Colorls::Git.git_prefix(repopath).should eq(["", true])
      values = [] of Array(String)
      Colorls::Git.git_subdir_status(repopath) do |i,j|
        values << [i,j]
      end
      #DEBUG
      p! values

      a = Colorls::Git.status(".")
      true
      
      # values.should be(["M", "foo.txt"])

      
      #allow(subject).to receive(:git_prefix).with("/repo/").and_return(["", true])
      #allow(subject).to receive(:git_subdir_status).and_yield("M", "foo.txt")
      #expect(subject.status("/repo/")).to include("foo.txt" => Set["M"])
    end

#    it "returns `??`" do
#      allow(subject).to receive(:git_prefix).with("/repo/").and_return(["", true])
#      allow(subject).to receive(:git_subdir_status).and_yield("??", "foo.txt")
#
#      #expect(subject.status("/repo/")).to include("foo.txt" => Set["??"])
#    end
  end

#  context "with file in subdir" do
#    it "returns `M` for subdir" do
#      allow(subject).to receive(:git_prefix).with("/repo/").and_return(["", true])
#      allow(subject).to receive(:git_subdir_status).and_yield("M", "subdir/foo.txt")
#
#      #expect(subject.status("/repo/")).to include("subdir" => Set["M"])
#    end
#
#    it "returns `M` and `D` for subdir" do
#      allow(subject).to receive(:git_prefix).with("/repo/").and_return(["", true])
#      allow(subject).to receive(:git_subdir_status).and_yield("M", "subdir/foo.txt").and_yield("D", "subdir/other.c")
#
#      #expect(subject.status("/repo/")).to include("subdir" => Set["M", "D"])
#    end
#  end
  
end
