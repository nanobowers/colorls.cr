# frozen_string_literal: false

require "../spec_helper"
require "../../src/colorls"

include Colorls

describe Colorls::Core do
  blackhash = Hash(String,String).new("black")
  subject = Core.new(all: false, sort: false, show: false,
                     mode: DisplayMode::OnePerLine , git_status: false, almost_all: false,
                     colors: blackhash, group: GroupBy::Files, reverse: false,
                     hyperlink: false, tree_depth: 1, show_group: false,
                     show_user: false )
  
  context "ls" do
    
    it "works with Unicode characters" do
      camera = "Cámara"
      imagenes = "Imágenes"

      dir_info = instance_double(
        "FileInfo",
        group: "sys",
        mtime: Time.local,
        directory?: true,
        owner: "user",
        name: imagenes,
        path: ".",
        show: imagenes,
        nlink: 1,
        size: 128,
        blockdev?: false,
        chardev?: false,
        socket?: false,
        symlink?: false,
        stats: { 
          mode: 0o444, # read for user, owner, other
          setuid?: false,
          setgid?: false,
          sticky?: false
        },
        executable?: true
      )

      file_info = instance_double(
        "FileInfo",
        group: "sys",
        mtime: Time.now,
        directory?: false,
        owner: "user",
        name: camera,
        show: camera,
        nlink: 1,
        size: 128,
        blockdev?: false,
        chardev?: false,
        socket?: false,
        symlink?: false,
        stats: {
          mode: 0o444, # read for user, owner, other
          setuid?: false,
          setgid?: false,
          sticky?: false
        },
        executable?: false
      )

      allow(::Dir).to receive(:entries).and_return([camera])

      allow(Colorls::FileInfo).to receive(:new).and_return(file_info)

      expect { subject.ls_dir(dir_info) }.to output(/mara/).to_stdout
    end

    it "works for `...`" do
      file_info = instance_double(
        "FileInfo",
        group: "sys",
        mtime: Time.now,
        directory?: false,
        owner: "user",
        name: "...",
        show: "...",
        nlink: 1,
        size: 128,
        blockdev?: false,
        chardev?: false,
        socket?: false,
        symlink?: false,
        executable?: false
      )

      expect { subject.ls_files([file_info]) }.to output(/[.]{3}/).to_stdout
    end
  end
end
